<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python创建自定义包</title>
      <link href="/2025/01/09/note-create_custom_packages_in_python/"/>
      <url>/2025/01/09/note-create_custom_packages_in_python/</url>
      
        <content type="html"><![CDATA[<h1 style="font-size: 20px;">python中自定义包时，初始化文件的书写规范</h1><h3 id="1-项目结构示例"><a href="#1-项目结构示例" class="headerlink" title="1. 项目结构示例"></a>1. 项目结构示例</h3><ul><li><strong><code>SmodernUI/</code></strong>:</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">SmodernUI/</span><br><span class="line">│</span><br><span class="line">├── component/</span><br><span class="line">│   ├── ui/</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── Ui_message.py</span><br><span class="line">│   │   └── Ui_tip.py</span><br><span class="line">│   │</span><br><span class="line">│   ├── widget/</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── button.py</span><br><span class="line">│   │   └── tip.py</span><br><span class="line">│   │</span><br><span class="line">│   └── window/</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── message.py</span><br><span class="line">│</span><br><span class="line">├── core/</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── color.py</span><br><span class="line">│   ├── globals.py</span><br><span class="line">│   ├── animation.py</span><br><span class="line">│   └── func.py</span><br><span class="line">│</span><br><span class="line">├── resource/</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── resource_rc.py</span><br><span class="line">│</span><br><span class="line">└── __init__.py</span><br></pre></td></tr></table></figure><h3 id="2-根目录的-init-py-文件"><a href="#2-根目录的-init-py-文件" class="headerlink" title="2. 根目录的 __init__.py 文件"></a>2. 根目录的 <code>__init__.py</code> 文件</h3><p>在根目录下，你可以添加一个 <code>__init__.py</code> 文件导入整个库的核心模块。这样，用户只需导入库本身时，就能够轻松访问库中的重要功能。</p><ul><li><strong><code>SmodernUI/__init__.py</code></strong>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入核心模块</span></span><br><span class="line"><span class="keyword">from</span> .core.color <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .core.animation <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .core.func <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .core.<span class="built_in">globals</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入组件模块</span></span><br><span class="line"><span class="keyword">from</span> .component.ui.Ui_message <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .component.ui.Ui_tip <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .component.widgets.button <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .component.widgets.tip <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .component.window.message <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以根据需要导入更多的模块或函数</span></span><br></pre></td></tr></table></figure><h3 id="3-子包中的-init-py-文件"><a href="#3-子包中的-init-py-文件" class="headerlink" title="3. 子包中的 __init__.py 文件"></a>3. 子包中的 <code>__init__.py</code> 文件</h3><p>比如在子包 <code>component/</code> ，在<code>component/</code>目录下的每个子目录（例如 <code>ui/</code>, <code>widget/</code>, <code>window/</code>）中添加一个 <code>__init__.py</code> 文件，以便更清晰地组织每个子包。</p><ul><li><p><strong><code>component/ui/__init__.py</code></strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># component/ui/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入UI相关的模块</span></span><br><span class="line"><span class="keyword">from</span> .UI_message <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .UI_tip <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li><li><p><strong><code>component/widget/__init__.py</code></strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># component/widget/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入Widget相关的模块</span></span><br><span class="line"><span class="keyword">from</span> .button <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .tip <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li><li><p><strong><code>component/window/__init__.py</code></strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># component/window/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入window相关的模块</span></span><br><span class="line"><span class="keyword">from</span> .message <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li></ul><p>同样地，在 <code>core/</code> 目录下，你可以添加一个 <code>__init__.py</code> 文件来导入相关的核心模块。</p><ul><li><p><strong><code>core/__init__.py</code></strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># core/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入核心功能模块</span></span><br><span class="line"><span class="keyword">from</span> .color <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .animation <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .func <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-模块内部的互相导入"><a href="#3-模块内部的互相导入" class="headerlink" title="3. 模块内部的互相导入"></a>3. 模块内部的互相导入</h3><p>在模块内部，你可以使用相对导入来导入其他模块。例如，在 <code>message.py</code> 中，你可以这样导入 <code>Ui_message.py</code>，<code>globals.py</code>：</p><ul><li><strong><code>component/ui/Ui_message.py</code></strong>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ..ui <span class="keyword">import</span> Ui_message 或者 <span class="keyword">from</span> ..ui.Ui_message <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ...core <span class="keyword">import</span> Globals 或者 <span class="keyword">from</span> ...core.Globals <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h3 id="4-外部导入方法"><a href="#4-外部导入方法" class="headerlink" title="4. 外部导入方法"></a>4. 外部导入方法</h3><p>假设已经按照上述方式创建了 <code>__init__.py</code> 文件，现在可以方便地导入模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SmodernUI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以直接使用库中的模块和类</span></span><br><span class="line">SmodernUI.color.some_color_function()</span><br><span class="line">SmodernUI.UI_message.some_function_in_UI_message()</span><br><span class="line">SmodernUI.button.some_button_function()</span><br></pre></td></tr></table></figure><p>如果只需要部分功能，也可以按需导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> SmodernUI <span class="keyword">import</span> color, UI_message, button</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>在每个子目录中创建 <code>__init__.py</code> 文件来组织包内模块的导入。</li><li>在根目录的 <code>__init__.py</code> 中导入核心模块和常用功能，提供简洁的访问方式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令汇总</title>
      <link href="/2024/10/25/note-git_common_commands/"/>
      <url>/2024/10/25/note-git_common_commands/</url>
      
        <content type="html"><![CDATA[<hr><p>git命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 初始化仓库</span></span><br><span class="line">git status <span class="comment"># 查看仓库状态</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看提交历史</span></span><br><span class="line">git add .  <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span>  <span class="comment"># 提交暂存区文件到本地仓库</span></span><br><span class="line">git remote add origin &lt;repository&gt;  <span class="comment"># 添加远程仓库</span></span><br><span class="line">git pull origin master  <span class="comment"># 拉取远程仓库到本地仓库</span></span><br><span class="line">git pull --rebase origin master  <span class="comment"># 拉取远程仓库并合并到本地仓库</span></span><br><span class="line">git push origin master  <span class="comment"># 推送本地仓库到远程仓库</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> &lt;repository&gt;  <span class="comment"># 克隆远程仓库</span></span><br><span class="line">git branch <span class="comment"># 查看分支</span></span><br><span class="line">git checkout &lt;branch&gt; <span class="comment"># 切换分支</span></span><br><span class="line">git merge &lt;branch&gt; <span class="comment"># 合并分支</span></span><br><span class="line">git branch -d &lt;branch&gt; <span class="comment"># 删除分支</span></span><br><span class="line">git branch -D &lt;branch&gt; <span class="comment"># 强制删除分支</span></span><br><span class="line">git reset --hard HEAD <span class="comment"># 回退到上一个版本</span></span><br><span class="line">git reset --hard &lt;commit&gt; <span class="comment"># 回退到指定版本</span></span><br><span class="line">git <span class="built_in">rm</span> --cached images/ <span class="comment"># 删除文件索引，下次提交不会上传</span></span><br><span class="line">git <span class="built_in">rm</span> -r &lt;file/dir&gt; <span class="comment"># 删除文件索引及本地文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐分享</title>
      <link href="/2024/07/16/share-music/"/>
      <url>/2024/07/16/share-music/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="2024-07-16"><a href="#2024-07-16" class="headerlink" title=" 2024-07-16 "></a><font color = LightSeaGreen> 2024-07-16 </font></h3><p>1.绝区零六分街BGM-60%的日常·悠闲<br><font color = Gray>最近绝区零公测，这首BGM被我单曲循环了，但是Q音，网抑云都搜不到啊，于是我把它录了下来并做成mp3格式。</font></p><p>蓝奏云链接：<a href="https://ichinoseyuu.lanzn.com/iQyb524lqpze">点击此处跳转</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于深度学习的交通标识检测</title>
      <link href="/2024/03/28/release-yolov6-Traffic-signs/"/>
      <url>/2024/03/28/release-yolov6-Traffic-signs/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2024-05-11 -写UI中途发现版本兼容问题，现修正前期安装流程，更新了打包流程<br>2024-04-07 -新增遇到的问题分栏<br>2024-04-05 -简单记录了 Anaconda 的基本指令<br>2024-03-28 -完成了基础的环境搭建记录</p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2024-03-28：时间过得很快，大学四年就这么匆匆溜走，最近也是进入了毕设阶段，目前已有一些进展，正好有时间，那就大致记录一下目前的情况吧。<br>2024-05-11：这可能是博主第一次接触深度学习领域，也可能是最后一次，希望这博客能对有需要的人有所帮助。<br>2024-07-16：项目已打包，<a href="https://github.com/ichinoseyuu/yolov6-Traffic_signs">点击此处跳转</a></p><hr><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="下载并安装-Acnconda3"><a href="#下载并安装-Acnconda3" class="headerlink" title="下载并安装 Acnconda3"></a>下载并安装 Acnconda3</h4><p>在官网下载Acnconda3，<a href="https://www.anaconda.com/">点击此处跳转</a></p><h4 id="查看系统版本支持"><a href="#查看系统版本支持" class="headerlink" title="查看系统版本支持"></a>查看系统版本支持</h4><p><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202403280921933.png" alt="系统版本支持"></p><h4 id="选择-Tensorflow-版本"><a href="#选择-Tensorflow-版本" class="headerlink" title="选择 Tensorflow 版本"></a>选择 Tensorflow 版本</h4><p><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202403280922051.png" alt="Tensorflow版本"></p><h4 id="下载-cuda11-0-及-cuDNN8-0，安装-cuda11-0，并将-cuDNN-解压放入-cuda-安装文件夹"><a href="#下载-cuda11-0-及-cuDNN8-0，安装-cuda11-0，并将-cuDNN-解压放入-cuda-安装文件夹" class="headerlink" title="下载 cuda11.0 及 cuDNN8.0，安装 cuda11.0，并将 cuDNN 解压放入 cuda 安装文件夹"></a>下载 cuda11.0 及 cuDNN8.0，安装 cuda11.0，并将 cuDNN 解压放入 cuda 安装文件夹</h4><h4 id="检查是否配置成功"><a href="#检查是否配置成功" class="headerlink" title="检查是否配置成功"></a>检查是否配置成功</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">####　nvcc -V ##查看安装状态</span><br></pre></td></tr></table></figure><h4 id="用-Anaconda-配置虚拟环境-Tensorflow24"><a href="#用-Anaconda-配置虚拟环境-Tensorflow24" class="headerlink" title="用 Anaconda 配置虚拟环境 Tensorflow24"></a>用 Anaconda 配置虚拟环境 Tensorflow24</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Tensorflow24 python=3.8 ##创建一个虚拟环境</span><br><span class="line">conda activate Tensorflow24  ##进入环境</span><br><span class="line">##安装Tensorflow2.4</span><br><span class="line">pip install tensorflow==2.4.0 -i https://pypi.mirrors.ustc.edu.cn/simple</span><br><span class="line">##安装相同版本的keras</span><br><span class="line">pip install keras==2.4.0 -i https://pypi.mirrors.ustc.edu.cn/simple</span><br></pre></td></tr></table></figure><h4 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python                 #进入python环境</span><br><span class="line">import tensorflow as tf    #导入Tensorflow</span><br><span class="line">tf.test.is_gpu_available()   #查看GPU版本信息并返回gpu是否可用</span><br><span class="line">exit()    #退出python环境</span><br></pre></td></tr></table></figure><h4 id="安装必要的包文件"><a href="#安装必要的包文件" class="headerlink" title="安装必要的包文件"></a>安装必要的包文件</h4><p>这些包都需要安装在Tensorflow24环境下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python==4.9.0.80 #安装不上可以下载到本地安装</span><br><span class="line">conda install numpy==1.19.5</span><br><span class="line">conda install Pillow=8.4.0</span><br><span class="line">conda install tensorboard=2.7.0</span><br><span class="line">conda install tqdm</span><br><span class="line">Pip install pycocotools</span><br><span class="line">pip install matplotlib=3.2.2</span><br></pre></td></tr></table></figure><h4 id="从-github-将-Tensorflow-yoloV6-项目克隆到本地"><a href="#从-github-将-Tensorflow-yoloV6-项目克隆到本地" class="headerlink" title="从 github 将 Tensorflow-yoloV6 项目克隆到本地"></a>从 github 将 Tensorflow-yoloV6 项目克隆到本地</h4><p>该项目是基于 bubbliiiing大佬的项目编写的，大部分保留了源代码。 <a href="https://github.com/bubbliiiing/yolox-tf2">点击此处跳转</a><br><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202403280931166.png" alt="github相关仓库"></p><h4 id="数据准备和处理"><a href="#数据准备和处理" class="headerlink" title="数据准备和处理"></a>数据准备和处理</h4><p>自己做数据集，准备足够的带有交通标识的图片，然后在 Anaconda 里下载输入 pip install labelimg 命令下载安装 Labelimg。<br>重要：使用该软件进行数据集的标注，在使用时会有闪退报错的情况，提示传输的数据类型不正确，根据报错提示到指定文件的指定代码处进行修改，对预传输的数据进行强制转换成需要的数据类型即可。</p><p>使用公开的数据集，公开的数据集可能需要转换格式，需要自行编写代码转化成 VOC 格式，并放到指定目录，公开数据集的标注不一定适配想要的效果，建议还是自行准备数据集。</p><h4 id="初步训练"><a href="#初步训练" class="headerlink" title="初步训练"></a>初步训练</h4><p>打开 VScode，用搭建的 Anaconda 环境运行 train.py。</p><p>训练时长跟gpu核心数、数据集的大小、训练的世代次数有关，数据集的大小决定每个训练世代的时长，模型参数则可以设置训练的世代次数，训练的世代次数越多，训练时长也就越长，我的数据集花了 8 个小时去训练。</p><hr><h3 id="二、PyQt5"><a href="#二、PyQt5" class="headerlink" title="二、PyQt5"></a>二、PyQt5</h3><h4 id="常见-GUI-框架"><a href="#常见-GUI-框架" class="headerlink" title="常见 GUI 框架"></a>常见 GUI 框架</h4><p>PyQt5：Qt 是一个跨平台的 C++图形用于界面库。QT 一度被诺基亚使用，后出售芬兰的软件公司 Digia Oyj。PyQt5 是基于 Digia 公司 Qt5 的 Python 接口，由一组 Python 模块构成。PyQt5 本身拥有超过 620 个类和 6000 函数及方法。在可以运行于多个平台，包括：Unix，Windows，Mac OS。</p><p>Pyside6：Pyside 是 QT 公司官方提供 Python 包，上一版本为 Pyside2，对应的是 QT5，最新版命名规则进行了调整，更改为 Pyside6，对应的是 QT6 版本。由于官方出品的比较看好，缺点是发布比较晚，资料没有 PyQt5 多。</p><p>Tkinter：Python 内置的 GUI 框架，使用 TCL 实现，Python 中内嵌了 TCL 解释器，使用它的时候不用安装额外的扩展包，直接 import，跨平台。不足之处在于 UI 布局全靠代码实现，只有 15 种常用部件，显示效果简陋。</p><p><font color = LightSeaGreen>编写UI界面需要一定的面向对象编程基础，理解程序设计模式。<br></font>  </p><h4 id="在-Anaconda-下安装-pyqt5"><a href="#在-Anaconda-下安装-pyqt5" class="headerlink" title="在 Anaconda 下安装 pyqt5"></a>在 Anaconda 下安装 pyqt5</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyqt5</span><br><span class="line">pip3 install pyqt5-tools</span><br></pre></td></tr></table></figure><h4 id="安装-Qt-Designer-并打开"><a href="#安装-Qt-Designer-并打开" class="headerlink" title="安装 Qt Designer 并打开"></a>安装 Qt Designer 并打开</h4><p>方法一：安装 Anaconda3 时会自动安装，在Anaconda3输入命令就能打开<br>注意：需要在添加环境变量，否则无法在 conda 环境下调用，只能手动打开。</p><p>方法二：去 GitHub 开源项目地址下载。</p><p><a href="https://github.com/PyQt5/QtDesigner/releases/tag/5.15.0">项目地址</a></p><h4 id="Qt-Designer-的简单使用"><a href="#Qt-Designer-的简单使用" class="headerlink" title="Qt Designer 的简单使用"></a>Qt Designer 的简单使用</h4><p>CSDN 上有许多博主写有相关教程，B 站上有许多 up 主出过很多相关视频</p><p>Qt Designer 里面的控件界面编写需要前端基础，有 CSS 基础的可以很快上手，没有基础的也可以通过查看官方文档去查看控件属性，然后在编写样式。</p><p><a href="https://doc.qt.io/qt-6/stylesheet-reference.html">QT官方文档</a></p><h4 id="实现UI界面的功能"><a href="#实现UI界面的功能" class="headerlink" title="实现UI界面的功能"></a>实现UI界面的功能</h4><p>在Qt Designer将界面设计完成后，在vscode中输入指令将.ui文件转化成.py文件，转换完成后就会生成一个窗口类，然后新建一个python文件作为程序的入口，并继承这个窗口类，代码请参考项目具体内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic5 -x fileName.ui -o fileName.py ##将.ui文件转化成.py文件</span><br></pre></td></tr></table></figure><hr><h3 id="python-程序打包"><a href="#python-程序打包" class="headerlink" title="python 程序打包"></a>python 程序打包</h3><h4 id="安装-pyinstaller"><a href="#安装-pyinstaller" class="headerlink" title="安装 pyinstaller"></a>安装 pyinstaller</h4><p>在Tensorflow24环境中安装pyinstaller</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip pyinstaller </span><br></pre></td></tr></table></figure><h4 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h4><p>在vscode中执行以下命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -D -c flieName.py ##生成带命令行窗口的文件夹包</span><br><span class="line">pyinstaller -D -w flieName.py ##生成不带命令行窗口的文件夹包</span><br><span class="line">pyinstaller --help ##查看pyinstaller的帮助文档</span><br></pre></td></tr></table></figure><h3 id="Anaconda-常用指令"><a href="#Anaconda-常用指令" class="headerlink" title="Anaconda 常用指令"></a>Anaconda 常用指令</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conda info -e    ##查看所有环境</span><br><span class="line">conda create --name myenv  ##创建一个新环境</span><br><span class="line">conda activate myenv   ##激活一个环境</span><br><span class="line">conda install package_name=version ##安装包到环境中</span><br><span class="line">conda update conda   ##更新 Conda</span><br><span class="line">conda update --all   ##已安装的包</span><br><span class="line">conda list    ##查看当前环境下已安装的包</span><br><span class="line">conda search package_name  ##查找可用包的信息</span><br><span class="line">conda remove package_name  ##删除一个包</span><br><span class="line">conda env remove --name myenv  ##删除一个环境</span><br><span class="line">conda --help ##查看anaconda的帮助文档</span><br><span class="line">pip install /path/to/package.whl  ##安装本地包</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 发布 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用DSP实现数字滤波器</title>
      <link href="/2023/09/07/tutorial-DSP_digital_filter/"/>
      <url>/2023/09/07/tutorial-DSP_digital_filter/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大学的最后一个课程设计终于是完成了，虽然实际耗费的时间不到 10 小时（中间一直在摸鱼），不打算考研甚至有点闲得无聊，一时头脑发热想写下这篇博客。<br>笔者主要使用的软件是 CCSv2 版本和 Matlab2021，使用不同版本可能会出现不可预知的一些问题。</p><hr><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li>使用 Matlab 对音频进行加噪处理，并将数据输出到.dat 格式文件中。</li><li>在 CCS 中设计一个滤波器，将 Matlab 导出的数据进行处理，并输出到相应的.dat 文件中。</li><li>使用 Matlab 读取 CCS 输出的数据与滤波前进行对比。</li></ul><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>首先，肯定是安装好所需要的软件。</li><li>准备一段音频，你可以使用自己录制的音频，也可以使用一首歌曲。<br>ps：建议时间不要过长，一句话即可，过长会使 DSP 处理的时间变得很长。</li></ul><h3 id="使用-Matlab-对音频进行处理"><a href="#使用-Matlab-对音频进行处理" class="headerlink" title="使用 Matlab 对音频进行处理"></a>使用 Matlab 对音频进行处理</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Frequency_in = <span class="number">2500</span>;    <span class="comment">%需要引入的干扰正弦波的频率</span></span><br><span class="line">result_Fs = <span class="number">8000</span>;   <span class="comment">%音频采样率</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">%这里是你的音频路径，建议将音频放在与脚本的同级目录下</span></span><br><span class="line">[data,fs] = audioread(<span class="string">&#x27;C:\Users\kirit\Documents\MATLAB\CCS_music_filter-main\test_01.mp3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%=====================以下代码只对一个声道进行处理==========================</span></span><br><span class="line">temp2 = resample(data,result_Fs,fs); <span class="comment">%对原音频再次采样</span></span><br><span class="line">[size_data,~] = <span class="built_in">size</span>(temp2);  <span class="comment">%求取音频长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%给音频人为地添加干扰，干扰的频率由Frequency_in给定</span></span><br><span class="line"><span class="comment">%你可以在这里改变干扰的幅度，类型等</span></span><br><span class="line">noise = <span class="number">0.01</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*Frequency_in*size_data/result_Fs*<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">1</span>,size_data));</span><br><span class="line"></span><br><span class="line">temp2 = temp2 + noise&#x27;;<span class="comment">%加入噪声</span></span><br><span class="line">temp3 = int32(temp2*<span class="number">10</span>^<span class="number">4</span>);<span class="comment">%把数据处理成整形，方便DSP读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%=====================输出到DSP能读取的文件================================</span></span><br><span class="line"><span class="comment">%打开同级目录下的相应文件，没有则自动新建该文件</span></span><br><span class="line">fp1 = fopen(<span class="string">&#x27;_input.dat&#x27;</span>,<span class="string">&#x27;wt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fprintf(fp1,<span class="string">&#x27;1651 1 0 0 0\n&#x27;</span>);<span class="comment">%这里是在设置格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(temp3)</span><br><span class="line">    <span class="comment">%旧方法，输出较大的数会变成指数形式，貌似不能正常读取，我并没有尝试过</span></span><br><span class="line">    <span class="comment">%这里是使用%X来让fprintf来输出16进制</span></span><br><span class="line">    <span class="comment">%fprintf(fp1,&#x27;0x%X\n&#x27;,temp3(i));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%这里先用dec2hex()函数将数据转成16进制，然后用%s直接输出字符。</span></span><br><span class="line">    fprintf(fp1, <span class="string">&#x27;0x%s\n&#x27;</span>, dec2hex(temp3(<span class="built_in">i</span>)));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">fclose(fp1);<span class="comment">%关闭该文件，不关闭可能会导致数据丢失</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%sound(temp2,result_Fs); %播放处理结果</span></span><br><span class="line"><span class="comment">%plot(abs(fft(temp2)));%绘制频谱图</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行后，会在脚本文件的同级目录下生成数据文件。</li></ul><h3 id="CCS-部分"><a href="#CCS-部分" class="headerlink" title="CCS 部分"></a>CCS 部分</h3><ul><li>配置 DSP 芯片，打开 Setup CCS 2 (‘C5000)，选择 C5402 Device Simulator，点击 import，再点击 Save and Quit，然后软件会提示你是否进入 CCS 编辑器，选择是，然后进入 CCS 编辑器主界面。</li><li>新建项目，在 CCS 菜单栏点击 Project–&gt;New,然后会弹出一个窗口，在窗口中输入项目名（Project Name）、项目存储位置（Location）、项目类型（Project）和目标芯片（Target），对于后两个选项，我们对第一个选择.out 的项目类型，即我们编写汇编项目，目标芯片我们选择 TMS320C54XX，然后点击完成。</li><li>创建汇编源文件，点击见菜单栏的 File–&gt;New–&gt;Source File,点击弹出的窗口，按下快捷键 ctrl+s 进行保存，在弹出的窗口中选择保存位置、文件名、和文件类型，保存位置建议设置到你的项目目录下；文件名按你的喜好，但要符合命名规则；文件类型我们选择.asm 文件，然后点击保存。</li><li>将汇编源文件添加到项目中，点击菜单栏的 Project–&gt;Add Files to Project，将你创建的.asm 文件选中，再点击打开。</li><li>创建链接命令文件，以同样的方法创建一个类型为.cmd 的文件并添加到你的项目中。</li><li>在项目视图中找到这两个文件并打开，接下来开始编写程序代码。</li></ul><p>你的汇编源文件.asm</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        .mmregs</span><br><span class="line">        .title  &quot;project4.asm&quot;</span><br><span class="line">        .def   start</span><br><span class="line">      .bss   new_data,1</span><br><span class="line">      .bss   y,1</span><br><span class="line">xn    .usect  &quot;xn&quot;,9</span><br><span class="line">a0    .usect  &quot;a0&quot;,9</span><br><span class="line"></span><br><span class="line">      .data</span><br><span class="line">table:  .word   1*32768/10</span><br><span class="line">       .word   2*32768/10</span><br><span class="line">       .word   3*32768/10</span><br><span class="line">       .word   4*32768/10</span><br><span class="line">       .word   5*32768/10</span><br><span class="line">       .word   4*32768/10</span><br><span class="line">       .word   3*32768/10</span><br><span class="line">       .word   2*32768/10</span><br><span class="line">       .word   1*32768/10</span><br><span class="line"></span><br><span class="line">       .text</span><br><span class="line">start: SSBX    FRCT</span><br><span class="line">       STM     #a0,AR1</span><br><span class="line">       RPT     #8</span><br><span class="line">       MVPD    table,*AR1+</span><br><span class="line">       STM     #xn+8,AR2</span><br><span class="line">       STM     #a0+8,AR3</span><br><span class="line">       STM     #9,BK</span><br><span class="line">       STM     #-1,AR0</span><br><span class="line">       LD      #new_data,DP</span><br><span class="line">fir:   RPTZ    A,#8</span><br><span class="line">       MAC     *AR2+0%,*AR3+0%,A</span><br><span class="line">       STH     A,y</span><br><span class="line">       BD      fir</span><br><span class="line">       LD      new_data,B</span><br><span class="line">       STL     B,*AR2+0%</span><br><span class="line">       .end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你的链接命令文件.cmd</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line"> PAGE 0: EPROM: org=0080h, len=0100h</span><br><span class="line"> PAGE 1: SPRAM: org=0060h, len=0020h</span><br><span class="line">  DARAM: org=0180h, len=0100h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line"> .text : &gt;EPROM PAGE0</span><br><span class="line"> .data : &gt;EPROM PAGE0</span><br><span class="line"> .bss : &gt;SPRAM PAGE1</span><br><span class="line"> xn : &gt;(DARAM align(16) PAGE(1))</span><br><span class="line"> a0 : &gt;(DARAM align(16) PAGE(1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>保存并关闭这两个文件</li><li>进行汇编，点击 Project–&gt;Build，汇编成功后会在你的项目目录下生成一个 Debug 文件夹，在该文件夹下存在一个.out 类型的文件；点击 File–&gt;Load Program 加载汇编，在弹出的窗口中选中生成的.out 文件，点击打开。</li><li>配置 I&#x2F;O 文件前的准备：将 Matlab 中导出的.dat 数据文件，放在项目目录下，并在项目目录下创建一个.txt 的文本文件，用于滤波器输出，打开该文件，并在第一行编写“1651 1 61 1 1”并保存，然后将文件格式改为.dat 格式。</li><li>配置 I&#x2F;O 文件，首先在你的汇编源程序文件里的“STH A,y”语句前加探针，并在“ LD new_data,B”语句前加断点和探针。然后点击菜单栏中的 File–&gt;File I&#x2F;O，在弹出的窗口中点击 Add File，添加 Matlab 导出的.dat 数据文件，将地址（Address）改为”0x0060”，长度（Length）改为”1”，然后点击 Add Probe Point，选中“line 35”，再将 Connect To 选项设置为 Matlab 导出的文件，然后点击 Replace，输入配置完毕，点击确定，然后将选项卡设置为 File Output 以相同的方法添加上一步手动创建的用于滤波器输出.dat 文件，将地址设置为“0x0061”，长度设置为”1”，然后点击 Add Probe Point，选中“line 33”，再将 Connect To 选项设置为用于滤波器输出的文件，然后点击 Replace，输出配置完毕，点击确定，I&#x2F;O 配置完毕，点击确定即退出 File I&#x2F;O 窗口。</li><li>配置图形窗口，点击菜单栏中的 View–&gt;Graph–&gt;Time&#x2F;Frequency，在的弹出的窗口中将地址改为”0x0060”，Acquisition Buffer Size 改为“1”,Display Data Size 改为“128”，数据类型设置为“16-bit signed integer”，点击确定，以同样的方法，将地址改为“0x0061”，设置输出波形显示窗口。</li><li>布置好窗口布局，点击 Animate 进行运行，等待程序运行完毕。</li></ul><h3 id="数据对比"><a href="#数据对比" class="headerlink" title="数据对比"></a>数据对比</h3><ul><li>将 CCS 项目所输出的.dat 数据文件放到该脚本目录下</li><li>打开 Matlab，进行数据读取的代码编写</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%这里是你的.dat数据文件路径</span></span><br><span class="line">Id = fopen(<span class="string">&#x27;C:\Users\kirit\Documents\MATLAB\CCS_music_filter-main\_output.dat&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">data = fscanf(Id,<span class="string">&#x27;%x&#x27;</span>);<span class="comment">%按16进制读取</span></span><br><span class="line">data = data/<span class="number">10</span>^<span class="number">4</span>;<span class="comment">%恢复</span></span><br><span class="line">sound(data,<span class="number">8000</span>); <span class="comment">%播放时，注意采样率需要与生成时一致</span></span><br><span class="line">fclose(Id);</span><br><span class="line"><span class="built_in">plot</span>(<span class="built_in">abs</span>(fft(data)));<span class="comment">%绘制频谱图</span></span><br></pre></td></tr></table></figure><ul><li>运行程序，对比原音频和加噪音频，分析效果，反正我听着像对讲机发出的声音。</li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p><font color = LightSeaGreen> 2023-09-23 </font><br>课设验收已结束，在这公布我的最终代码以及完整项目。<br>在此就不提供预览了，需要的话直接下载。<br>链接：(百度云)<a href="https://pan.baidu.com/s/1PxtIWhfAMpXRFfCYe6G17w?pwd=qrpz">https://pan.baidu.com/s/1PxtIWhfAMpXRFfCYe6G17w?pwd=qrpz</a><br>(蓝奏云)<a href="https://ichinoseyuu.lanzn.com/iNv3E24lqqni">https://ichinoseyuu.lanzn.com/iNv3E24lqqni</a></p><p><font color = LightSeaGreen> 2023-09-20 </font></p><p>关于大家遇到的一些问题，在这里做出统一回答<br>Q:Matlab 程序报错，怎么解决？<br>A:Matlab 程序报错主要是软件的问题，不必非要用和我同样的版本，对于报错怎么解决，以下是我做的三种方案，希望能解决你 Matlab 报错的问题。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%最新方案，其实很简单，之前被我想的很复杂，在十进制和十六进制之间纠结</span></span><br><span class="line"><span class="comment">%使用此方案需要注意在CCS中设置I/O文件时需要将文件读取格式改成十进制，而不是十六进制</span></span><br><span class="line"><span class="comment">%至于原因我也不是很理解，AI给了一个我认为相对合理的解释</span></span><br><span class="line"><span class="comment">%对于十六进制数据读取时，我并不能编写出很好的归一化代码，导致了波形失真。</span></span><br><span class="line"><span class="comment">%而对于十进制我恰好能编写出能很好的归一化代码，合理地对音频数据进行缩放、归一化和处理，获得了良好的音频效果。</span></span><br><span class="line">fprintf(fp1, <span class="string">&#x27;%d\n&#x27;</span>, temp3(<span class="built_in">i</span>));<span class="comment">%在数据导出的for循环中使用该方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%1.旧方法，输出较大的数会变成指数形式，该方法经验证确实不能正常读取。</span></span><br><span class="line"><span class="comment">%尝试读取过小数的指数形式的数据，读取时的数值都为0</span></span><br><span class="line"><span class="comment">%这里是使用%X来让fprintf来输出16进制</span></span><br><span class="line">fprintf(fp1,<span class="string">&#x27;0x%X\n&#x27;</span>,temp3(<span class="built_in">i</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">%2.旧方法，滤波后结果很糟糕，跟对讲机一样，发现dsp能直接使用十进制，该方法弃用</span></span><br><span class="line"><span class="comment">%注意该方法在2016版本下不能正常使用</span></span><br><span class="line"><span class="comment">%这里先用dec2hex()函数将数据转成16进制，然后用%s直接输出字符。</span></span><br><span class="line">fprintf(fp1, <span class="string">&#x27;0x%s\n&#x27;</span>, dec2hex(temp3(<span class="built_in">i</span>)));</span><br></pre></td></tr></table></figure><p>Q:CCS 安装上打不开，怎么解决？<br>A:导致这个问题的原因是 CCS 的后台进程并没有被关掉，导致冲突，启动无响应<br>解决方法：打开任务管理器，找到后台进程中带 CCS 图标的一个进程，结束该进程。</p><p>Q:CCS 正常使用，但是代码报错或警告，怎么解决？<br>A:报错有很多种情况，以下提供我知道的一些报错的和解决方案。<br>1、报错，提示 BK 寄存器未定义。<br>未找到原因，BK 寄存器就是存在的，但是我们可以使用别人汇编过后的项目文件，则不需要去 build，直接进行后面的操作。<br>2、出现警告，没有报错。<br>直接忽略，进行后面操作。<br>3、其他报错。<br>很有可能是你的操作步骤不对，建议重新打开软件进行再次尝试。</p><p>Q:CCS 正常运行，图形不太正确。<br>A:观察你的_input.dat 文件： 1.文件是否过小，只有几 kb，如果是这样，你的 Matlab 生成数据的部分出现问题，观察 Matlab 是否报错； 2.文件中的数据是否正常，如果里面的数值全是 0，则说明你的音频选择可能有问题，或者你的 Matlab 生成数据有问题。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> CCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我复刻了一个经典小游戏：2048</title>
      <link href="/2023/08/01/release-game2048/"/>
      <url>/2023/08/01/release-game2048/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近复刻了一个经典小游戏 2048，复刻这个游戏一是因为我以前很喜欢玩，二是这个游戏在各个国内 3a 大作的小程序里几乎都能搜到，但是广告满天飞，什么看视频免费复活、不小心点一个按钮就进入其他小程序之类的事情是经常发生。这个复刻版主打的就是一个纯净无广告，还原经典。</p><h4 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h4><p><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202309081758189.png" alt="Image" width="50%"> </center></p><p><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202309081756098.png" alt="Image" width="25%"> </center></p><h4 id="欢迎下载"><a href="#欢迎下载" class="headerlink" title="欢迎下载"></a>欢迎下载</h4><p>2048 是一个基于数字方块合并的休闲益智游戏，玩家通过滑动屏幕或按键来合并相同数字方块，方块占满方格且不能合并时游戏结束。<br>百度网盘链接：<a href="https://pan.baidu.com/s/1j-owHfDWKiuje_-09QlkcQ?pwd=1nv2">点击此处跳转</a><br>蓝奏云链接:<a href="https://ichinoseyuu.lanzn.com/b0fomfz3a">点击此处跳转</a> 密码:6666</p><h4 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h4><p><font color = LightSeaGreen> 2024-09-01 更新 Version1.3</font><br><font color = Gray>–焕然一新的界面，简洁，丝滑，无广告</font></p><p><font color = LightSeaGreen> 2023-10-19 更新 Version1.2</font><br><font color = Gray>–修复了安卓端的动画显示效果<br>–添加了更加丝滑的动画</font></p><p><font color = LightSeaGreen> 2023-08-28 更新 Version1.1</font><br><font color = Gray>–修复了 pc 端和安卓端刚进入游戏时移动方块错位的 bug<br>–添加了应用图标<br>–更改了方块的生成逻辑，每次生成方块有一定概率会生成数字为 4 的方块</font></p>]]></content>
      
      
      <categories>
          
          <category> 发布 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人开发的小游戏——project1024</title>
      <link href="/2023/07/09/release-game1024/"/>
      <url>/2023/07/09/release-game1024/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h4><p><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202309081751216.png" alt="Image" width="50%"> </center></p><p><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202309081754634.png" alt="Image" width="50%"> </center></p><h4 id="欢迎下载体验我的游戏-Demo"><a href="#欢迎下载体验我的游戏-Demo" class="headerlink" title="欢迎下载体验我的游戏 Demo"></a>欢迎下载体验我的游戏 Demo</h4><p>这是一个俯视角休闲射击小 Demo，玩家通过控制角色进行战斗，敌人死亡会掉落道具，增加得分，拾取道具来增强角色、恢复血量和子弹  </p><p>百度网盘链接：<a href="https://pan.baidu.com/s/1IlXPFWFk-lt80ivnALOcOQ?pwd=z05o">点击此处跳转</a><br>蓝奏云链接：<a href="https://ichinoseyuu.lanzn.com/b0fomfz7e">点击此处跳转</a> 密码:6666</p>]]></content>
      
      
      <categories>
          
          <category> 发布 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="/2023/05/30/tutorial-personal_blog_building/"/>
      <url>/2023/05/30/tutorial-personal_blog_building/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h4><p>去<a href="http://nodejs.cn/download/">node.js 官网</a>下载 64 位安装包，版本要求 16 以上，注意要下载长期支持版，安装时的配置默认就行。<br>如果下载很慢就<a href="https://mirrors.tuna.tsinghua.edu.cn/">去这</a>，进入网站直接搜索 node 就能看到，<br>每个大版本最后一个小版本即为长期支持版，比如 16 版的长期支持版为 v16.20.0。</p><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><p>去<a href="https://git-scm.com/download/win">Git 官网</a>下载 64 位安装包，选择 64-bit Git for Windows Setup，安装时的配置默认就行。</p><h4 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h4><p>打开 Window 自带的 powershell，输入以下指令进行安装</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h4><p>在 powershell 里面输入下面这些指令，如果显示各自的版本号则成功安装。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">git -version</span><br><span class="line">npm -version</span><br></pre></td></tr></table></figure><h4 id="注册-Github-账号，并建立一个仓库"><a href="#注册-Github-账号，并建立一个仓库" class="headerlink" title="注册 Github 账号，并建立一个仓库"></a>注册 Github 账号，并建立一个仓库</h4><p>去<a href="https://github.com/">Github 官网</a>注册一个 GitHub 账号。<br>创建仓库界面如下图所示，由于我已建立该仓库，所以显示红色提示，<br>正常情况下是绿色提示，注意选择公开仓库，加不加说明文件都可以，然后点击创建按钮。<br><img src="https://cdn.jsdelivr.net/gh/ichinoseyuu/Image/202305301943094.png" alt="image_signupgithubuser"></p><hr><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h4 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h4><p>在你的磁盘中选一个合适的位置创建一个文件夹（建议创建在在用户文件夹下如 C:\Users\你的用户名\blog），默认为 blog，可以自定义，但最好不以数字开头，不要有空格，不要有中文。</p><h4 id="与-github-建立连接"><a href="#与-github-建立连接" class="headerlink" title="与 github 建立连接"></a>与 github 建立连接</h4><p>打开 powershell，输入指令使目录定位到新建的 blog 文件夹；或者在 blog 文件夹下右键使用 vscode 打开，vscode 的终端会自动定位到该目录，vscode 的终端可以替代 powershell 的功能，也方便后期的博客内容编写及发布操作。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./文件夹名/   //定位到当前目录的该文件夹</span><br><span class="line">cd ..           //返回上一目录</span><br></pre></td></tr></table></figure><p>在 powershell 或者 vscode 中输入以下指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;建立github所用的邮箱&quot;</span><br></pre></td></tr></table></figure><p>1.打开 blog 同级目录下的.ssh 文件夹（如果找不到请检查是否以上指令没有执行成功），右键选择打开方式，以记事本形式打开”id_rsa.pub”文件，Ctrl+A 全选，复制里面的所有内容。</p><p>2.打开你的 GitHub 主页，打开设置，并选择左侧的”SSH and GPG keys”，点击”New SSH key”，为你的 key 命名，不以数字开头，不要有空格，不要有中文。</p><p>3.在 key 中粘贴上一步复制的内容，并选择下面的”Add SSH key”</p><p>4.然后在 powershell 或者 vscode 中输入以下指令，并输入 yes 进行验证，与 GitHub 建立连接。成功后你的邮箱会收到 GitHub 的邮件。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h4 id="绑定-GitHub-账户"><a href="#绑定-GitHub-账户" class="headerlink" title="绑定 GitHub 账户"></a>绑定 GitHub 账户</h4><p>在 powershell 或者 vscode 中输入以下指令进行绑定账户</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github用户名&quot;</span><br><span class="line">git config --global user.email &quot;建立github所用的邮箱&quot;</span><br></pre></td></tr></table></figure><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>在 powershell 或者 vscode 中输入以下指令安装 Hexo 框架</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h4><p>在 powershell 或者 vscode 中输入以下指令进行初始化,这时 blog 文件夹下多了 Hexo 的默认网站文件，可以使用”hexo s”指令在浏览器输入 localhost:4000 就可以看到。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>用记事本打开本地仓库中的_config.yml 文件，在以下的地方进行修改。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:GitHub用户名/仓库名.git</span><br><span class="line">  branch: master //你的仓库分支，可以去你的仓库的设置进行查看，一般是main</span><br></pre></td></tr></table></figure><h4 id="安装上传工具"><a href="#安装上传工具" class="headerlink" title="安装上传工具"></a>安装上传工具</h4><p>在 powershell 或者 vscode 中输入以下指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><h4 id="将本地文件部署到-GitHub-仓库"><a href="#将本地文件部署到-GitHub-仓库" class="headerlink" title="将本地文件部署到 GitHub 仓库"></a>将本地文件部署到 GitHub 仓库</h4><p>在 powershell 或者 vscode 中输入以下指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>至此已基本安装完成，可以在浏览器输入你的博客地址查看效果。</p><h4 id="Hexo-的常用指令"><a href="#Hexo-的常用指令" class="headerlink" title="Hexo 的常用指令"></a>Hexo 的常用指令</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    or  hexo c   //清除生成的静态网页缓存</span><br><span class="line">hexo deploy   or  hexo d   //部署到你的网站</span><br><span class="line">hexo generate or  hexo g   //更新静态网页</span><br><span class="line">hexo help     or  hexo h   //查看帮助</span><br><span class="line">hexo new &quot;name&quot;   or  hexo n &quot;name&quot; //创建一篇新博客</span><br><span class="line">hexo server   or  hexo s   //创建本地服务器以查看网页情况，并没有部署</span><br><span class="line">hexo g -d                  //更新静态网页并部署到你的网站</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
